// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @unique @default(autoincrement())
  email        String
  password     String
  role         Int
  confirmed    Int
  unLocked     DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?
  teachers     Teacher[]
  illustrators Illustrator[]
  institutions Institution[]

  @@map("users")
}

model Teacher {
  id           Int           @id @unique @default(autoincrement())
  user_id      Int           @unique
  user         User          @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name         String?
  occupation   String?
  createAt     DateTime      @default(now())
  updatedAt    DateTime?
  institutions Institution[] @relation("TeacherInstitution")

  @@map("teachers")
}

model TeacherInstitution {
  id             Int       @id @unique @default(autoincrement())
  institution_id Int       @unique
  teacher_id     Int       @unique
  createAt       DateTime  @default(now())
  updatedAt      DateTime?

  @@map("teachers_institutions")
}

model Institution {
  id                    Int       @id @unique @default(autoincrement())
  user_id               Int?      @unique
  user                  User?     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  institution_type      Int
  institution_name      String
  cnpj_inep             String
  city                  String
  state                 String
  school_type           Int?
  institution_email     String?   @unique
  institution_phone     String?
  registrant_name       String
  registrant_email      String
  registrant_occupation String?
  registrant_whatsapp   String
  institution_status     Int
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?
  essays                Essay[]
  authors               Author[]
  teachers              Teacher[] @relation("TeacherInstitution")

  @@map("institutions")
}

model Author {
  id             Int         @id @unique @default(autoincrement())
  institution_id Int         @unique
  institution    Institution @relation(fields: [institution_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name           String
  class          String
  age            Int
  createAt       DateTime    @default(now())
  updatedAt      DateTime?
  essays         Essay[]

  @@map("authors")
}

model Theme {
  id        Int       @id @unique @default(autoincrement())
  theme     String
  createAt  DateTime  @default(now())
  updatedAt DateTime?
  essays    Essay[]   @relation("ThemeEssay")

  @@map("themes")
}

model ThemeEssay {
  id        Int       @id @unique @default(autoincrement())
  theme_id  Int       @unique
  essay_id  Int       @unique
  createAt  DateTime  @default(now())
  updatedAt DateTime?

  @@map("themes_essays")
}

model Essay {
  id             Int            @id @unique @default(autoincrement())
  institution_id Int            @unique
  institution    Institution    @relation(fields: [institution_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  author_id      Int            @unique
  author        Author         @relation(fields: [author_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  title          String
  essay          String
  status         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?
  illustrations  Illustration[]
  themes         Theme[]        @relation("ThemeEssay")

  @@map("essays")
}

model Illustrator {
  id            Int            @id @unique @default(autoincrement())
  user_id       Int?           @unique
  user          User?          @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  name          String
  email         String
  cpf_cnpj      String
  whatsapp      String
  portfolio    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?
  illustrations Illustration[]

  @@map("illustrators")
}

model Illustration {
  id             Int         @id @unique @default(autoincrement())
  essay_id       Int         @unique
  essay          Essay       @relation(fields: [essay_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  illustrator_id Int         @unique
  illustrator    Illustrator @relation(fields: [illustrator_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  url_file       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?

  @@map("illustrations")
}
